package AXiS_Tuning_File_Generator;
import java.util.*; 
import java.io.*;

public class AXiS_Tuning_File_Generator {
Scanner scan = new Scanner(System.in);
PrintWriter tun, scl, kbm;
ArrayList<Note> notes;
double generator;
double period;
double lowestPitch;

    public static void main(String[] args) {
        AXiS_Tuning_File_Generator atfg = new AXiS_Tuning_File_Generator();
        atfg.go();
    }
    
    public void go(){
        notes = new ArrayList<Note>();
        
        System.out.println("generator:");
        generator = scan.nextDouble();
        System.out.println("period:");
        period = scan.nextDouble();
        
        setUpFiles();
        setUpNotes();
        findLowest();

        Collections.sort(notes, PITCH_ORDER);
        
        fillFiles();

        
        
    }
    
    public void fillFiles(){
        for(int i = 0; i<notes.size(); i++){
            
            System.out.println(notes.get(i));
            
            for(int j = 0; j<notes.size(); j++){
                if(notes.get(j).midiNote==i+1){
                    tun.println("note "+(i+1)+"="+(notes.get(j).pitch+lowestPitch));
                    kbm.println(j);
                }
            }
            if(i!=0){
                scl.println(notes.get(i).pitch+lowestPitch);
            }
        }
        
        tun.close();
        scl.close();
        kbm.close();
    }
    
    public void setUpFiles(){
        File dotTun = new File("/home/john/Desktop/AXiS.tun");
        dotTun.getParentFile().mkdirs();
        try{tun = new PrintWriter(dotTun,"UTF-8");}catch(Exception e){System.out.println(e);}
        
        File dotScl = new File("/home/john/Desktop/AXiS.scl");
        dotScl.getParentFile().mkdirs();
        try{scl = new PrintWriter(dotScl,"UTF-8");}catch(Exception e){System.out.println(e);}
        
        File dotKbm = new File("/home/john/Desktop/AXiS.kbm");
        dotKbm.getParentFile().mkdirs();
        try{kbm = new PrintWriter(dotKbm,"UTF-8");}catch(Exception e){System.out.println(e);}
        
        tun.println("; AXiS-49 .tun file, generated by a crappy program written by John Moriarty");
        tun.println("[Tuning]");
        
        scl.println("!"+generator+","+period+".scl");
        scl.println("Scale for AXiS-49 mapping of generator:"+generator+" period:"+period);
        scl.println("98");
        
        kbm.println("!Size of map");
        kbm.println(98);
        kbm.println("!First MIDI note number to retune:");
        kbm.println(1);
        kbm.println("!Last MIDI note number to retune:");
        kbm.println(98);
        kbm.println("!\"Middle note\" where the first entry of the mapping is mapped to:");
        kbm.println(1);
        kbm.println("!Reference note:");
        kbm.println(53);
        kbm.println("!Reference frequency:");
        kbm.println(4000);
        kbm.println("!Scale degree to consider formal octave:");
        kbm.println(99);
        kbm.println("!Mapping:");
    }
    
    public void findLowest(){
        lowestPitch=notes.get(0).pitch;
        for(Note n:notes){//find lowest pitch
            if (n.pitch<lowestPitch){
                lowestPitch=n.pitch;
            }
        }
        lowestPitch=Math.abs(lowestPitch);
    }
    
    public void setUpNotes(){
        notes.add(new Note(1,7,-7));
        notes.add(new Note(2,5,-6));
        notes.add(new Note(3,3,-5));
        notes.add(new Note(4,1,-4));
        notes.add(new Note(5,-1,-3));
        notes.add(new Note(6,-3,-2));
        notes.add(new Note(7,-5,-1));
        
        notes.add(new Note(8,6,-6));
        notes.add(new Note(9,4,-5));
        notes.add(new Note(10,2,-4));
        notes.add(new Note(11,0,-3));
        notes.add(new Note(12,-2,-2));
        notes.add(new Note(13,-4,-1));
        notes.add(new Note(14,-6,0));
        
        notes.add(new Note(15,7,-6));
        notes.add(new Note(16,5,-5));
        notes.add(new Note(17,3,-4));
        notes.add(new Note(18,1,-3));
        notes.add(new Note(19,-1,-2));
        notes.add(new Note(20,-3,-1));
        notes.add(new Note(21,-5,0));
        
        notes.add(new Note(22,6,-5));
        notes.add(new Note(23,4,-4));
        notes.add(new Note(24,2,-3));
        notes.add(new Note(25,0,-2));
        notes.add(new Note(26,-2,-1));
        notes.add(new Note(27,-4,0));
        notes.add(new Note(28,-6,1));
        
        notes.add(new Note(29,7,-5));
        notes.add(new Note(30,5,-4));
        notes.add(new Note(31,3,-3));
        notes.add(new Note(32,1,-2));
        notes.add(new Note(33,-1,-1));
        notes.add(new Note(34,-3,0));
        notes.add(new Note(35,-5,1));
        
        notes.add(new Note(36,6,-4));
        notes.add(new Note(37,4,-3));
        notes.add(new Note(38,2,-2));
        notes.add(new Note(39,0,-1));
        notes.add(new Note(40,-2,0));
        notes.add(new Note(41,-4,1));
        notes.add(new Note(42,-6,2));
         
        notes.add(new Note(43,7,-4));
        notes.add(new Note(44,5,-3));
        notes.add(new Note(45,3,-2));
        notes.add(new Note(46,1,-1));
        notes.add(new Note(47,-1,0));
        notes.add(new Note(48,-3,1));
        notes.add(new Note(49,-5,2));
        
        notes.add(new Note(50,6,-3));
        notes.add(new Note(51,4,-2));
        notes.add(new Note(52,2,-1));
        notes.add(new Note(53,0,0));
        notes.add(new Note(54,-2,1));
        notes.add(new Note(55,-4,2));
        notes.add(new Note(56,-6,3));
        
        notes.add(new Note(57,5,-2));
        notes.add(new Note(58,3,-1));
        notes.add(new Note(59,1,0));
        notes.add(new Note(60,-1,1));
        notes.add(new Note(61,-3,2));
        notes.add(new Note(62,-5,3));
        notes.add(new Note(63,-7,4));
        
        notes.add(new Note(64,6,-2));
        notes.add(new Note(65,4,-1));
        notes.add(new Note(66,2,0));
        notes.add(new Note(67,0,1));
        notes.add(new Note(68,-2,2));
        notes.add(new Note(69,-4,3));
        notes.add(new Note(70,-6,4));
        
        notes.add(new Note(71,5,-1));
        notes.add(new Note(72,3,0));
        notes.add(new Note(73,1,1));
        notes.add(new Note(74,-1,2));
        notes.add(new Note(75,-3,3));
        notes.add(new Note(76,-5,4));
        notes.add(new Note(77,-7,5));
        
        notes.add(new Note(78,6,-1));
        notes.add(new Note(79,4,0));
        notes.add(new Note(80,2,1));
        notes.add(new Note(81,0,2));
        notes.add(new Note(82,-2,3));
        notes.add(new Note(83,-4,4));
        notes.add(new Note(84,-6,5));
        
        notes.add(new Note(85,5,0));
        notes.add(new Note(86,3,1));
        notes.add(new Note(87,1,2));
        notes.add(new Note(88,-1,3));
        notes.add(new Note(89,-3,4));
        notes.add(new Note(90,-5,5));
        notes.add(new Note(91,-7,6));
        
        notes.add(new Note(92,6,0));
        notes.add(new Note(93,4,1));
        notes.add(new Note(94,2,2));
        notes.add(new Note(95,0,3));
        notes.add(new Note(96,-2,4));
        notes.add(new Note(97,-4,5));
        notes.add(new Note(98,-6,6));
              
    }
    
    static final Comparator<Note> PITCH_ORDER = new Comparator<Note>(){
        public int compare(Note n1, Note n2){
            if(n1.getPitch()<n2.getPitch()){
                return -1;
            }
            else if(n1.getPitch()==n2.getPitch()){
                return 0;
            }
            else{
                return 1;
            }

        }
    };
    public class Note{
        
        public double getPitch(){
            return pitch;
        }
        int x, y, midiNote;
        double pitch;
        public Note(int midiNoteIn, int xIn, int yIn){
            x=xIn;
            y=yIn;
            midiNote=midiNoteIn;
            pitch = x*generator+y*period;
        }
        @Override
        public String toString(){
            return "Pitch:"+pitch+", Coords:("+x+","+y+"),MidiNote:"+midiNote;
        }
    }
}


/*

I need two things:

List of pitches, in order
Mapping of midi note numbers to locations in that list

I have

mapping of midi note numbers to pitch.
So I should:
-associate the midi note number with the pitch
-sort the list
-print pitches to scale file
-cycle through list to find each midi note, and pring the location of that midi note in the sorted list
*/